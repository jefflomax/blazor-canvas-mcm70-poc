@if (Display)
{
	<div id="selectTape"
		class="modal fade show d-block"
		tabindex="-1"
		role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Select Tape for drive @Tapes.SelectedDrive</h5>
					<button type="button"
						class="close"
						@onclick="@Close"
						data-dismiss="modal"
						aria-label="Close">
						<span aria-hidden="true">×</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<select id="tapes"
							@ref="_select"
							@onchange="onChange">
							<option value="-1">Select</option>
							@foreach(var tape in Tapes._tapeEntryList)
							{
								<option
									value="@tape.Id"
									selected=@(Tapes.Selected(tape.Id))
									disabled=@(Tapes.InOtherTape(tape.Id))>@tape.GetName()</option>
							}
						</select>
					</div>
					<button type="button"
						class="btn btn-primary"
						@onclick="Select">Select</button>
					<button type="button"
						class="btn btn-outline"
						@onclick="Close">Cancel</button>
					<button type="button"
						class="btn btn-secondary"
						@onclick="Eject">EJECT</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public BlazorCanvas.Emulator.TapeEntriesWasm Tapes { get; set; } = null;

	[Parameter]
	public bool Display { get; set; } = false;

	[Parameter]
	public EventCallback<int> OnTapeSelected { get; set; }

	private void onChange(ChangeEventArgs args)
	{
		SelectedIndex = int.Parse(args.Value.ToString());
	}

	public int SelectedIndex = -1;

	private ElementReference _select;

	public async void Close(MouseEventArgs me)
	{
		Display = false;
		await OnTapeSelected.InvokeAsync(-1);
	}

	public async void Select(MouseEventArgs me)
	{
		Display = false;
		StateHasChanged();
		await OnTapeSelected.InvokeAsync(SelectedIndex);
	}

	public async void Eject(MouseEventArgs me)
	{
		Display = false;
		StateHasChanged();
		await OnTapeSelected.InvokeAsync(int.MaxValue);
	}
}
